$OpenBSD$

Index: src/bin/pg_autoctl/system_utils.c
--- src/bin/pg_autoctl/system_utils.c.orig
+++ src/bin/pg_autoctl/system_utils.c
@@ -24,7 +24,7 @@
 static bool get_system_info_linux(SystemInfo *sysInfo);
 #endif
 
-#if defined(__APPLE__) || defined(BSD)
+#if defined(__APPLE__) || defined(__OpenBSD__)
 static bool get_system_info_bsd(SystemInfo *sysInfo);
 #endif
 
@@ -35,7 +35,7 @@ static bool get_system_info_bsd(SystemInfo *sysInfo);
 bool
 get_system_info(SystemInfo *sysInfo)
 {
-#if defined(__APPLE__) || defined(BSD)
+#if defined(__APPLE__) || defined(__OpenBSD__)
 	return get_system_info_bsd(sysInfo);
 #elif defined(__linux__)
 	return get_system_info_linux(sysInfo);
@@ -75,16 +75,20 @@ get_system_info_linux(SystemInfo *sysInfo)
 /*
  * FreeBSD, OpenBSD, and darwin use the sysctlbyname(3) API.
  */
-#if defined(__APPLE__) || defined(BSD)
+#if defined(__APPLE__) || defined(__OpenBSD__)
 static bool
 get_system_info_bsd(SystemInfo *sysInfo)
 {
 	unsigned int ncpu = 0;      /* the API requires an integer here */
+	int mib[2];
 
 	size_t cpuSize = sizeof(ncpu);
 	size_t memSize = sizeof(sysInfo->totalram);
 
-	if (sysctlbyname("hw.ncpu", &ncpu, &cpuSize, NULL, 0) != 0)
+	mib[0] = CTL_HW;
+	mib[1] = HW_NCPU;
+
+	if (sysctl(mib, 2, &ncpu, &cpuSize, NULL, 0) == -1)
 	{
 		log_error("Failed to probe number of CPUs: %m");
 		return false;
@@ -92,7 +96,10 @@ get_system_info_bsd(SystemInfo *sysInfo)
 
 	sysInfo->ncpu = (unsigned short) ncpu;
 
-	if (sysctlbyname("hw.memsize", &(sysInfo->totalram), &memSize, NULL, 0) != 0)
+	mib[0] = CTL_HW;
+	mib[1] = HW_PHYSMEM64;
+
+	if (sysctl(mib, 2, &(sysInfo->totalram), &memSize, NULL, 0) == -1)
 	{
 		log_error("Failed to probe Physical Memory: %m");
 		return false;
