$OpenBSD$
--- slock.c.orig	Fri Feb 12 14:29:02 2016
+++ slock.c	Fri Dec  9 12:53:00 2016
@@ -17,6 +17,7 @@
 #include <X11/keysym.h>
 #include <X11/Xlib.h>
 #include <X11/Xutil.h>
+#include <Imlib2.h>
 
 #if HAVE_BSD_AUTH
 #include <login_cap.h>
@@ -36,6 +37,7 @@ typedef struct {
 	int screen;
 	Window root, win;
 	Pixmap pmap;
+	Pixmap bgmap;
 	unsigned long colors[NUMCOLS];
 } Lock;
 
@@ -46,7 +48,10 @@ static Bool failure = False;
 static Bool rr;
 static int rrevbase;
 static int rrerrbase;
+static int slock_argc;
 
+Imlib_Image image;
+
 static void
 die(const char *errstr, ...)
 {
@@ -187,7 +192,10 @@ readpw(Display *dpy, const char *pws)
 			color = len ? INPUT : (failure || failonclear ? FAILED : INIT);
 			if (running && oldc != color) {
 				for (screen = 0; screen < nscreens; screen++) {
-					XSetWindowBackground(dpy, locks[screen]->win, locks[screen]->colors[color]);
+					if(locks[screen]->bgmap)
+						XSetWindowBackgroundPixmap(dpy, locks[screen]->win, locks[screen]->bgmap);
+					else
+						XSetWindowBackground(dpy, locks[screen]->win, locks[screen]->colors[0]);
 					XClearWindow(dpy, locks[screen]->win);
 				}
 				oldc = color;
@@ -241,12 +249,27 @@ lockscreen(Display *dpy, int screen)
 		lock->colors[i] = color.pixel;
 	}
 
+	if(image) {
+		lock->bgmap = XCreatePixmap(dpy, lock->root, DisplayWidth(dpy, lock->screen), DisplayHeight(dpy, lock->screen), DefaultDepth(dpy, lock->screen));
+		imlib_context_set_image(image);
+		imlib_context_set_display(dpy);
+		imlib_context_set_visual(DefaultVisual(dpy, lock->screen));
+		imlib_context_set_colormap(DefaultColormap(dpy, lock->screen));
+		imlib_context_set_drawable(lock->bgmap);
+		imlib_render_image_on_drawable(0, 0);
+		imlib_free_image();
+	}
+
 	/* init */
 	wa.override_redirect = 1;
 	wa.background_pixel = lock->colors[INIT];
 	lock->win = XCreateWindow(dpy, lock->root, 0, 0, DisplayWidth(dpy, lock->screen), DisplayHeight(dpy, lock->screen),
 	                          0, DefaultDepth(dpy, lock->screen), CopyFromParent,
 	                          DefaultVisual(dpy, lock->screen), CWOverrideRedirect | CWBackPixel, &wa);
+
+	if(lock->bgmap)
+		XSetWindowBackgroundPixmap(dpy, lock->win, lock->bgmap);
+
 	lock->pmap = XCreateBitmapFromData(dpy, lock->win, curs, 8, 8);
 	invisible = XCreatePixmapCursor(dpy, lock->pmap, lock->pmap, &color, &color, 0, 0);
 	XDefineCursor(dpy, lock->win, invisible);
@@ -283,7 +306,7 @@ lockscreen(Display *dpy, int screen)
 static void
 usage(void)
 {
-	fprintf(stderr, "usage: slock [-v|POST_LOCK_CMD]\n");
+	fprintf(stderr, "\nusage: slock [options]\noptions:\n\t-v\tPrint version and exit.\n\t-i\t<full path to image file to display>\n");
 	exit(1);
 }
 
@@ -295,8 +318,16 @@ main(int argc, char **argv) {
 	Display *dpy;
 	int screen;
 
+	slock_argc = 1;
 	if ((argc == 2) && !strcmp("-v", argv[1]))
 		die("slock-%s, Â© 2006-2016 slock engineers\n", VERSION);
+	if ((argc >= 3) && !strcmp("-i", argv[1])) {
+		image = imlib_load_image(argv[2]);
+		if(!image) {
+			die("slock: unable to load image.\n");
+		}
+		slock_argc = 3;
+	}
 
 	if ((argc == 2) && !strcmp("-h", argv[1]))
 		usage();
@@ -333,11 +364,11 @@ main(int argc, char **argv) {
 		return 1;
 	}
 
-	if (argc >= 2 && fork() == 0) {
+	if (argc > slock_argc && fork() == 0) {
 		if (dpy)
 			close(ConnectionNumber(dpy));
-		execvp(argv[1], argv+1);
-		die("slock: execvp %s failed: %s\n", argv[1], strerror(errno));
+		execvp(argv[slock_argc], argv+slock_argc);
+		die("slock: execvp %s failed: %s\n", argv[slock_argc], strerror(errno));
 	}
 
 	/* Everything is now blank. Now wait for the correct password. */
